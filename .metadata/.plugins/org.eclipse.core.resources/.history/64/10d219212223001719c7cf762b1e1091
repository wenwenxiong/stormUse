package stormUse.stormUse.java8stream;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.StringJoiner;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class CollectUse
{
	public static void main( String[] args)
	{
		Boolean debug = false;
		DebugPrint debugPrint = new DebugPrint(debug);
		
		List<Person> persons = Arrays.asList(
				new Person("Max", 18),
				new Person("Peter", 23),
				new Person("Pamela", 23),
				new Person("David", 12));
		
		//stream to list
		List<Person> filterPersons = persons.stream().filter( p -> p.age > 18 ).collect(Collectors.toList());
		debugPrint.print(debug, filterPersons);
		
		//stream to set
		Set<Person> Persons = persons.stream().filter( p -> p.name.startsWith("P")).collect(Collectors.toSet());
		debugPrint.print(debug, Persons);		
		
		//stream to map
		Map<String, Person> personsMap = persons.stream().collect(Collectors.toMap(Person::getName, p -> p));
		Map<String, List<Person>> personMaps = persons.stream().collect(Collectors.groupingBy(Person::getName));
		debugPrint.print(debug, personsMap);
		debugPrint.print(debug, personMaps);
		
		//collect join
		Collector<Person, StringJoiner, String> personNameCollector = Collector.of(
				() -> new StringJoiner(" | "),
				(j, p) -> j.add(p.name.toUpperCase()),
				(j1, j2) -> j1.merge(j2), 
				StringJoiner::toString);
		String names = persons.stream().collect(personNameCollector);
		debugPrint.print(debug, names);
		
		//flatMap 
		List<Teacher> teachers = new ArrayList<Teacher>();
		IntStream.range(1, 4).forEach(i -> teachers.add(new Teacher("teacher" + i)));
		teachers.forEach(f -> IntStream.range(1, 4).forEach(i -> f.students.add(new Student("student" + i + " <- " + f.name))));
		teachers.stream().flatMap(t -> t.students.stream()).forEach(s -> debugPrint.print(false, s.name));
		
		//mapToObject
		
		
	}

}
